<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PT Media Antar Nusa (Nusanet) - Chat</title>
    <link rel="icon" type="image/x-icon" href="{{url_for('static', filename=('/img/image.png'))}}">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f5f5f5;
            height: 100vh;
            overflow: hidden;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 100%;
            margin: 0 auto;
            background-color: #f5f5f5;
        }

        /* Header */
        .chat-header {
            background: linear-gradient(135deg, #4fc3f7 0%, #29b6f6 100%);
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .logo {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .logo i {
            color: white;
            font-size: 1.5rem;
        }

        .header-info {
            flex: 1;
        }

        .company-name {
            color: white;
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
        }

        .online-status {
            display: flex;
            align-items: center;
            margin-top: 3px;
        }

        .online-dot {
            width: 8px;
            height: 8px;
            background-color: #4caf50;
            border-radius: 50%;
            margin-right: 6px;
            animation: pulse 2s infinite;
        }

        .online-text {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.85rem;
            font-weight: 400;
        }

        /* Chat Area */
        .chat-area {
            flex: 1;
            padding: 2rem 1.5rem 1rem;
            overflow-y: auto;
            background-color: #f5f5f5;
        }

        .chat-area::-webkit-scrollbar {
            width: 6px;
        }

        .chat-area::-webkit-scrollbar-track {
            background: transparent;
        }

        .chat-area::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 3px;
        }

        .message {
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            max-width: 70%;
            animation: slideIn 0.3s ease-out;
        }

        /* User messages - Sebelah Kanan */
        .message.user {
            align-self: flex-end;
            margin-left: auto;
        }

        .message.user .message-bubble {
            background: linear-gradient(135deg, #c8e6c9 0%, #a5d6a7 100%);
            color: #2e7d32;
        }

        .message.user .message-time {
            align-self: flex-end;
            text-align: right;
        }

        /* System messages - Sebelah Kiri */
        .message.system {
            align-self: flex-start;
            margin-right: auto;
        }

        .message.system .message-bubble {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            color: #1565c0;
        }

        .message.system .message-time {
            align-self: flex-start;
            text-align: left;
        }

        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 18px;
            font-size: 0.95rem;
            line-height: 1.4;
            word-wrap: break-word;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            position: relative;
            max-width: 100%;
        }

        .message-time {
            font-size: 0.75rem;
            color: #666;
            margin-top: 0.25rem;
        }

        /* SQL Query Bubble - Bulatan kecil di bawah message */
        .sql-query-bubble {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-top: 0.5rem;
            margin-left: 1rem;
            box-shadow: 0 3px 10px rgba(255, 107, 107, 0.3);
            transition: all 0.3s ease;
            position: relative;
        }

        .sql-query-bubble:hover {
            transform: translateY(-2px) scale(1.1);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .sql-query-bubble i {
            color: white;
            font-size: 0.8rem;
        }

        /* Tooltip for SQL bubble */
        .sql-query-bubble::before {
            content: 'Lihat Query SQL';
            position: absolute;
            bottom: 110%;
            left: 50%;
            transform: translateX(-50%);
            background: #333;
            color: white;
            padding: 0.4rem 0.6rem;
            border-radius: 6px;
            font-size: 0.7rem;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            pointer-events: none;
        }

        .sql-query-bubble::after {
            content: '';
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            border: 5px solid transparent;
            border-top-color: #333;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .sql-query-bubble:hover::before,
        .sql-query-bubble:hover::after {
            opacity: 1;
            visibility: visible;
        }

        /* Modal Styles untuk SQL Query */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 700px;
            max-height: 80vh;
            overflow: hidden;
            animation: modalSlideIn 0.3s ease-out;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background-color 0.3s;
        }

        .close-btn:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .modal-body {
            padding: 1.5rem;
            max-height: 60vh;
            overflow-y: auto;
        }

        /* SQL Code Block */
        .sql-code {
            background: #2d3748;
            color: #e2e8f0;
            padding: 1.5rem;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            line-height: 1.6;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            margin: 1rem 0;
            position: relative;
        }

        /* SQL Syntax Highlighting */
        .sql-keyword {
            color: #63b3ed;
            font-weight: bold;
        }

        .sql-string {
            color: #68d391;
        }

        .sql-comment {
            color: #a0aec0;
            font-style: italic;
        }

        .sql-function {
            color: #fbb6ce;
        }

        /* Copy Button */
        .copy-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #4a5568;
            border: none;
            color: white;
            padding: 0.4rem 0.8rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.75rem;
            transition: background-color 0.3s;
        }

        .copy-btn:hover {
            background: #2d3748;
        }

        .copy-btn.copied {
            background: #38a169;
        }

        /* Query Info */
        .query-info {
            background: #f7fafc;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            border-left: 4px solid #ff6b6b;
        }

        .query-info h4 {
            margin: 0 0 0.5rem 0;
            color: #2d3748;
            font-size: 1rem;
        }

        .query-info p {
            margin: 0;
            color: #4a5568;
            font-size: 0.9rem;
        }

        /* Input Area */
        .input-area {
            padding: 1rem 1.5rem 1.5rem;
            background-color: #f5f5f5;
        }

        .input-container {
            display: flex;
            align-items: center;
            background: white;
            border-radius: 25px;
            padding: 0.5rem 0.75rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .input-container:focus-within {
            border-color: #29b6f6;
            box-shadow: 0 4px 25px rgba(41, 182, 246, 0.15);
        }

        .message-input {
            flex: 1;
            border: none;
            outline: none;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
            background: transparent;
            color: #333;
        }

        .message-input::placeholder {
            color: #999;
        }

        .send-button {
            width: 45px;
            height: 45px;
            background: linear-gradient(135deg, #29b6f6 0%, #42a5f5 100%);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            margin-left: 0.5rem;
            box-shadow: 0 3px 12px rgba(41, 182, 246, 0.3);
        }

        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(41, 182, 246, 0.4);
        }

        .send-button:active {
            transform: translateY(0);
        }

        .send-button i {
            color: white;
            font-size: 1.1rem;
        }

        .connected {
            color: green;
        }

        .disconnected {
            color: red;
        }

        /* Animations */
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(15px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .chat-area {
                padding: 1rem;
            }
            
            .input-area {
                padding: 0.75rem 1rem 1rem;
            }
            
            .message {
                max-width: 85%;
            }

            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #999;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        .empty-state h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: #666;
        }

        .empty-state p {
            color: #999;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Header -->
        <div class="chat-header">
            <div class="logo">
               <img src="{{url_for('static', filename=('/img/image.png'))}}" alt="Logo" width="60" height="48" class="d-inline-block align-text-top rounded-circle">
            </div>
            <div class="header-info">
                <h1 class="company-name">PT Media Antar Nusa (Nusanet)</h1>
                <div class="connection-status" id="connectionStatus">
                    <span class="connecting">Menghubungkan...</span>
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area" id="chatArea">
            <div class="empty-state" id="emptyState">
                <i class="fas fa-comment-dots"></i>
                <h3>Selamat datang!</h3>
                <p>Beritahu kami data yang anda butuhkan!</p>
            </div>
        </div>

        <!-- Input Area -->
       <!-- Input Area -->
        <div class="input-area">
            <div class="input-container">
                <input 
                    type="text" 
                    class="message-input" 
                    id="messageInput" 
                    placeholder="Ketik pesan anda disini..."
                    autocomplete="off"
                >
                <button class="send-button" id="sendButton" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>

    </div>

    <!-- Modal for displaying SQL Query -->
    <div id="sqlModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-code"></i> SQL Query</h3>
                <button class="close-btn" onclick="closeSqlModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="sqlModalBody">
                <!-- SQL content will be inserted here -->
            </div>
        </div>
    </div>

    <script>
        let messageCount = 0;
        var status = {{connection | tojson | safe}};

        if(status === "success") {
            connectionStatus.innerHTML = '<span class="connected"><i class="fas fa-circle"></i> Terhubung</span>';
        } else {
            connectionStatus.innerHTML = '<span class="disconnected"><i class="fas fa-circle"></i> Terputus</span>';
        }

        // Get current time in HH:MM format
        function getCurrentTime() {
            const now = new Date();
            return now.toLocaleTimeString('id-ID', { 
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false 
            });
        }

        // Show typing indicator
        function showTyping() {
            const chatArea = document.getElementById('chatArea');
            const emptyState = document.getElementById('emptyState');
            
            // Hide empty state if typing indicator is the first interaction
            if (messageCount === 0) {
                emptyState.style.display = 'none';
            }
            
            // Create typing indicator element
            const typingDiv = document.createElement('div');
            typingDiv.className = 'typing-indicator';
            typingDiv.id = 'activeTyping';
            
            typingDiv.innerHTML = `
                <div class="typing-bubble">
                    <span class="typing-text">Nusafind sedang mengetik</span>
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;
            setTimeout(() => {
                chatArea.appendChild(typingDiv);
                chatArea.scrollTop = chatArea.scrollHeight;
            }, 1000); // Trigger animation immediately 
            
            
        }

        // Hide typing indicator
        function hideTyping() {
            const activeTyping = document.getElementById('activeTyping');
            if (activeTyping) {
                activeTyping.remove();
            }
        }

        function addMessageHistory(text, type,time) {
            const chatArea = document.getElementById('chatArea');
            const emptyState = document.getElementById('emptyState');
            // Hide empty state on first message
            if (messageCount === 0) {
                emptyState.style.display = 'none';
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            messageDiv.innerHTML = `
                <div class="message-bubble" style="overflow-x: auto; width: 100%;">${text}</div>
                <div class="message-time">${time}</div>
            `;

            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
            messageCount++;
        }

        // Mengambil data yang sudah di-render dari Flask ke dalam JavaScript
        let chatHis = {{ hisChat | tojson }};
        console.log(chatHis);

        // Memeriksa apakah chatHis ada dan merupakan array yang valid
        if (chatHis && Array.isArray(chatHis) && chatHis.length > 0) {
            // Menggunakan reverse untuk menampilkan data dari yang terakhir
            chatHis.reverse().forEach(chat => {
                // Pastikan format waktu sudah benar (misal "HH:MM:SS")
                addMessageHistory(`${chat.question}`, 'user', `${chat.time}`);
                addMessageHistory(`${chat.respons}`, 'system', `${chat.time}`);
            });
            hideTyping();  // Menyembunyikan indikator mengetik setelah chat diproses
        } else {
            console.log("No chat history available or invalid format.");
            hideTyping();  // Menyembunyikan indikator mengetik jika tidak ada riwayat chat
        }


        // Add message to chat
        function addMessage(text, type) {
            const chatArea = document.getElementById('chatArea');
            const emptyState = document.getElementById('emptyState');
            // Hide empty state on first message
            if (messageCount === 0) {
                emptyState.style.display = 'none';
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            messageDiv.innerHTML = `
                <div class="message-bubble" style="overflow-x: auto; width: 100%;">${text}</div>
                <div class="message-time">${getCurrentTime()}</div>
            `;

            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
            messageCount++;
        }

        // Send message function
        let waitingResponse = false;
        let isLoggedIn = {{isLogin | tojson | safe}};
        let sessionId = {{session_id | tojson | safe}};
        console.log("Session ID:", sessionId);
        console.log("Is Logged In:", isLoggedIn);

        function sendMessage() {
            const input = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendButton');
            const message = input.value.trim();

            // Jangan kirim pesan jika masih menunggu balasan
            if (!message || waitingResponse) return;
             // Show typing indicator when sending message    
            addMessage(message, 'user');

             // Show typing indicator
            input.value = '';
            waitingResponse = true;
            input.disabled = true;
            sendBtn.disabled = true;

            // Jika user belum login dan pesan mengandung @ (anggap email)
            if (!isLoggedIn && message.includes('@')) {
                showTyping(); // Show typing indicator before login attempt
                handleLogin(message);
                hideTyping(); // Hide typing indicator after login attempt
                return;
            } else if (message == 'logout' || message == 'Logout' || message == 'LOGOUT' || message == 'Keluar' || message == 'keluar') {
               if (!isLoggedIn){
                    addMessage("Anda belum login", 'system');
                    resetInput(input, sendBtn);
                    return;
               } // Handle logout
                fetch('/logout')
                    .then(response => response.json())
                    .then(data => {
                        isLoggedIn = false;
                        sessionId = null;
                        addMessage("Anda telah berhasil logout.", 'system');
                        resetInput(input, sendBtn);
                        return;
                    })
                    .catch(error => {
                        console.error('Logout error:', error);
                        addMessage("Terjadi kesalahan saat logout. Coba lagi.", 'system');
                        resetInput(input, sendBtn);
                        return;
                    })
                    .finally(() => hideTyping()); // Hide typing indicator after logout
                return;
            } else if (message == "reset" || message == "Reset" || message == "RESET") {
                fetch('/reset', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => {
                    if (response.ok) {
                        console.log("Session reset successful.");
                        window.location.href = '/';  // Sesuaikan URL sesuai aplikasi kamu
                    } else {
                        console.error('Failed to reset session.');
                    }
                })
                .catch(error => {
                    console.error('Error during session reset:', error);
                })
                .finally(() => hideTyping()); // Hide typing indicator after reset
                return;
            } else if (message == 'help' || message == 'Help' || message == 'HELP') {
                addMessage("Ketikkan email anda untuk login, atau ketik 'logout' untuk keluar. Dan ketik reset jika ingin menghapus chat", 'system');
                resetInput(input, sendBtn);
                hideTyping();
                return;
            } else if (message == 'clear' || message == 'Clear' || message == 'CLEAR') {
                document.getElementById('chatArea').innerHTML = '';
                emptyState.style.display = 'block';
                resetInput(input, sendBtn);
                hideTyping();
                return;
            }

            if (isLoggedIn) {
                showTyping(); // Show typing indicator before asking
                handleAsk(message); // Ask if already logged in
                hideTyping(); // Hide typing indicator after ask
            } else {
                addMessage("Silakan masukkan email untuk login terlebih dahulu.", 'system');
                resetInput(input, sendBtn);
                hideTyping();
            }
            console.log("Bawah")
        }

        // Fungsi untuk menangani login
        function handleLogin(email) {
            hideTyping();
            const input = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendButton');
            fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question: email })
            })
            .then(response => response.json())
            .then(data => {
                if (data.answer) {
                    sessionId = data.answer;
                    isLoggedIn = true;
                    window.location.href = '/';
                    addMessage(`Halo selamat datang, ${sessionId}. Ada yang bisa kami bantu?`, 'system');
                    if (data.hisChat && data.hisChat.length > 0) {
                        data.hisChat.reverse().forEach(chat => {
                            // Menambahkan question dan respons ke dalam chat
                            addMessageHistory(`${chat.question}`, 'user', `${chat.time}`);
                            addMessageHistory(`${chat.respons}`, 'system', `${chat.time}`);
                        });
                        hideTyping(); 
                    }
                    hideTyping(); // Hide typing indicator after login
                } else if (data.error) {
                    addMessage(data.error, 'system');
                    hideTyping();
                }
                hideTyping(); // Hide typing indicator after login attempt
            })
            .catch(error => {
                console.error('Login error:', error);
                addMessage("Terjadi kesalahan saat login. Coba lagi.", 'system');
            })
            .finally(() => resetInput(input, sendBtn)); hideTyping(); // Always reset input after login attempt
        }

        // Fungsi untuk menangani pengiriman pertanyaan setelah login
        function handleAsk(message) {
            hideTyping();
            const input = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendButton');
            fetch('/ask', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question: message, session_id: sessionId })
            })
            .then(response => response.json())
            .then(data => {
                addMessage(data.answer, 'system');
            })
            .catch(error => {
                console.error('Error:', error);
                addMessage("Terjadi kesalahan. Coba lagi.", 'system');
            })
            .finally(() => resetInput(input, sendBtn)); hideTyping(); // Always reset input after ask
        }

        function resetInput(input, sendBtn) {
            waitingResponse = false;
            input.disabled = false;
            sendBtn.disabled = false;
            input.focus();
            hideTyping(); // Hide typing indicator when done
        }






        // Enter key to send
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Focus input on load
        window.addEventListener('load', function() {
            document.getElementById('messageInput').focus();
        });

        setInterval(isLoggedIn, sessionId, 5000)
        
    </script>
</body>
</html>